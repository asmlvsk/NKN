@page "/tracks"
@inherits TracksModel
@inject HttpClient Http
@inject IDialogService DialogService

<MudButton Variant="Variant.Filled" @onclick="@(e => OpenAddDialog(true))">Add Track</MudButton>

@if (trackList == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTable Items="@trackList" Dense="true" Hover="true" Filter="new Func<TrackData,bool>(FilterFunc)" >
        <ToolBarContent>
            <MudText Typo="Typo.h6">Nick's tracks</MudText>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="@searchString"
                          Placeholder="Search"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Genre</MudTh>
            <MudTh>Release Date</MudTh>
            <MudTh>Track Description</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.TrackName</MudTd>
            <MudTd DataLabel="Genre">@context.TrackGenre</MudTd>
            <MudTd DataLabel="Release Date">@context.TrackReleaseDate?.ToShortDateString()</MudTd>
            <MudTd DataLabel="Track Description">@context.TrackDescription</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" @onclick="@(e => OpenEditDialog(context, true))" />
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" @onclick="@(() => DeleteTrack(context.Id))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}


<!--<MatTable Items="@trackList" class="mat-elevation-z5" AllowSelection="true" FilterByColumnName="TrackName" SelectionChanged="SelectionChanged">
    <MatTableHeader>
        <th>Name</th>
        <th>Genre</th>
        <th>Release Date</th>
        <th>Track Description</th>
    </MatTableHeader>
    <MatTableRow>
        <td>@context.TrackName</td>
        <td>@context.TrackGenre</td>
        <td>@context.TrackReleaseDate.ToShortDateString()</td>
        <td>@context.TrackDescription</td>
        <td>
            <MatButton Raised="true" @onclick="@(e => OpenDialog(true))" Icon="edit" title="Edit Track"></MatButton>
            <MatButton Raised="true" @onclick="@(async () => await DeleteTrack(context.Id))" Icon="restore_from_trash" title="Delete Track"></MatButton>
        </td>
    </MatTableRow>
</MatTable>

<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>Add / Edit Track</MatDialogTitle>
    <MatDialogContent>
        <MatTextField Label="Track Name" @bind-Value="@track.TrackName"></MatTextField>
        <MatTextField Label="Track Genre" @bind-Value="@track.TrackGenre"></MatTextField>
        <MatDatePicker Label="Track Release Date" @bind-Value="@track.TrackReleaseDate"></MatDatePicker>-->
@*<MatTextField Label="Track Links" @bind-Value="@track.TrackLinks"></MatTextField>*@
@*<MatTextField Label="Track Image" @bind-Value="@track.TrackImg"></MatTextField>*@
<!--<MatTextField Label="Track Description" @bind-Value="@track.TrackDescription"></MatTextField>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="OkClickAsync">Add</MatButton>
        <MatButton OnClick="CloseModal">Close</MatButton>
    </MatDialogActions>
</MatDialog>-->

@code{ 

    async Task OpenAddDialog(bool _disabled)
    {
        disabled = _disabled;
        var parameters = new DialogParameters { ["isAdd"] = _disabled };
        var dialog = DialogService.Show<DialogComponent>("Add Track", parameters);
        var result = await dialog.Result;

    }
    async Task OpenEditDialog(TrackData track, bool _disabled)
    {
        disabled = _disabled;
        var parameters = new DialogParameters { ["isEdit"] = _disabled, ["track"] = track };
        var dialog = DialogService.Show<DialogComponent>("Edit Track", parameters);
        var result = await dialog.Result;
    }

}