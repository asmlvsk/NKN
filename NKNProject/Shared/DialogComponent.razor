@using NKNProject.Pages;
@using System.Globalization

@inject SpotifyBuilder builder

<MudForm>
    <MudDialog @bind-IsValid="@isAdd">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
                Add / Edit Track
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField T="string" @bind-Value="@Track.TrackName" Label="Track Name" ReadOnly="false" Required="true" RequiredError="Track Name is required!" />
            <MudTextField T="string" @bind-Value="@Track.TrackGenre" Label="Track Genre" ReadOnly="false" Required="true" RequiredError="Track Genre is required!" />
            <MudTextField T="string" @bind-Value="@Track.TrackDescription" Label="Track Description" ReadOnly="false" Required="true" RequiredError="Track description is required!" />
            <MudDatePicker @bind-Date="@Track.TrackReleaseDate" DateFormat="dd/MM/yyyy" Culture="@CultureInfo.CurrentCulture" Label="Track Release Date" RequiredError="Track released is required!" />
            <MudTextField T="string" @bind-Value="@Track.TrackLinks" Label="Track Link" ReadOnly="false" Required="true" RequiredError="Track link is required!" />
            <MudItem xs="12" md="12">
                <MudSelect T="string" HelperText="Choose album" @bind-Value="@Track.TrackImg">
                    @if (albums != null)
                    {
                        @foreach (var state in albums.Items)
                        {
                            <MudSelectItem T="string" Value="@state.Name">@state.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Disabled="@isEdit" OnClick="OkClickAsync" Color="Color.Success">Add</MudButton>
            <MudButton Disabled="@isAdd" OnClick="OkClickEditedAsync" Color="Color.Success">Save</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>



@code {

    [Parameter] public TrackData Track { get; set; } = new TrackData();


    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] private HttpClient Http { get; set; }
    [Inject] private ISnackbar Snackbar { get; set; }

    [Parameter] public bool isEdit { get; set; }
    [Parameter] public bool isAdd { get; set; }
    protected List<TrackData> trackList;
    public Paging<SimpleAlbum> albums { get; set; }
    //bool success = false;

    public DialogComponent(){}

    public DialogComponent(SpotifyBuilder spotifyClientBuilder)
    {
        builder = spotifyClientBuilder;
    }

    protected override async Task OnInitializedAsync()
    {
        Http = new HttpClient()
        {
            BaseAddress = new Uri(Constants.BASE_ADDRESS)
        };
        var spotify = builder.BuildClient();

        var albumRequest = new ArtistsAlbumsRequest
        {
            Limit = 50
        };

        albums = await spotify.Result.Artists.GetAlbums(Constants.ARTIST_ID, albumRequest);

        //if (!success)
        //{
        //    isAdd = false;
        //    isEdit = false;
        //}
        //else
        //{
        //    isAdd = true;
        //    isEdit = true;
        //}
    }


    public async Task GetTrack()
    {
        trackList = await Http?.GetJsonAsync<List<TrackData>>(Constants.API_PATH);
    }

    public async void OkClickAsync()
    {
        if (Track != null)
        {
            //await TrackAccess.StoreImage(Track);
            await Http.PostJsonAsync(Constants.API_PATH, Track);
        }
        else
        {
            Snackbar.Add("Error", Severity.Error);
        }
        StateHasChanged();
        await GetTrack();
        MudDialog.Close();
    }

    public async void OkClickEditedAsync()
    {
        if (Track != null)
        {
            await Http.PutJsonAsync(Constants.API_PATH, Track);
        }
        else
        {
            Snackbar.Add("Error", Severity.Error);
        }
        StateHasChanged();
        await GetTrack();
        MudDialog.Close();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
